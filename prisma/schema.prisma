// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(uuid())
  name           String
  username       String           @unique
  email          String           @unique
  password       String
  active         Boolean          @default(true)
  roles          Role[]
  rg             String           @unique
  cpf            String           @unique
  cnpj           String
  mobile_phone   String           @unique
  position       String
  city           String
  state          String
  image_url      String           @default("")
  thumb_url      String           @default("")
  image_path     String           @default("")
  thumb_path     String           @default("")
  created_at     DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  AttendanceList AttendanceList[]

  @@map("users")
}

model Role {
  id          String       @id @default(uuid())
  name        String       @unique
  description String
  users       User[]
  permissions Permission[]
  created_at  DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt

  @@map("roles")
}

model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  roles       Role[]
  created_at  DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  @@map("permissions")
}

model Event {
  id                  String           @id @default(uuid())
  title               String
  slug                String           @unique
  image_url           String           @default("")
  thumb_url           String           @default("")
  image_path          String           @default("")
  thumb_path          String           @default("")
  ticket_img_path     String           @default("")
  summary             String
  description         String
  date                DateTime
  transmission_link   String           @default("")
  schedule_link       String           @default("")
  vacancy_total       Int
  vacancies_per_brand Int
  minimum_quorum      Int
  free_online         Boolean          @default(false)
  highlight           Boolean
  start_time          String
  end_time            String
  format              String
  speakers            Speaker[]
  sponsors            Sponsor[]
  supporters          Supporter[]
  address             Address          @relation(fields: [addressId], references: [id])
  addressId           String
  created_at          DateTime         @default(now())
  updatedAt           DateTime         @default(now()) @updatedAt
  AttendanceList      AttendanceList[]

  @@map("events")
}

model ExternalEvent {
  id          String   @id @default(uuid())
  title       String
  description String
  date        DateTime
  event_link  String
  image_url   String
  thumb_url   String
  highlight   Boolean
  created_at  DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  @@map("external-events")
}

model HighlightCard {
  id            String   @id @default(uuid())
  title         String
  image_url     String
  external_link String
  active        Boolean  @default(true)
  created_at    DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt

  @@map("highlight_card")
}

model AttendanceList {
  id                 String   @id @default(uuid())
  eventId            String
  userId             String
  company_cnpj       String
  company_segment    String
  attendee_full_name String
  attendee_email     String
  attendee_position  String
  attendee_rg        String
  attendee_type      String
  attendee_cpf       String
  mobile_phone       String
  checked_in         Boolean
  created_at         DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt
  event              Event    @relation(fields: [eventId], references: [id])
  user               User?    @relation(fields: [userId], references: [id])
  company            Company? @relation(fields: [company_cnpj], references: [cnpj])

  @@unique([eventId, attendee_email, attendee_cpf, attendee_rg])
  @@map("attendance_list")
}

model Speaker {
  id         String   @id @default(uuid())
  name       String   @unique
  image_url  String   @default("")
  thumb_url  String   @default("")
  image_path String   @default("")
  thumb_path String   @default("")
  events     Event[]
  created_at DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("speakers")
}

model Sponsor {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  image_url   String   @default("")
  thumb_url   String   @default("")
  image_path  String   @default("")
  thumb_path  String   @default("")
  events      Event[]
  created_at  DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  @@map("sponsors")
}

model Supporter {
  id         String   @id @default(uuid())
  name       String   @unique
  image_url  String   @default("")
  thumb_url  String   @default("")
  image_path String   @default("")
  thumb_path String   @default("")
  events     Event[]
  created_at DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("supporters")
}

model ResetToken {
  id         String   @id @default(uuid())
  userId     String
  ttl        DateTime
  used       Boolean
  created_at DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("reset_password_token")
}

model State {
  id      String    @id
  uf      String    @unique
  name    String    @unique
  cities  City[]
  Address Address[]

  @@map("states")
}

model City {
  id      String    @id @default(uuid())
  name    String
  state   State?    @relation(fields: [stateId], references: [id])
  stateId String?
  Address Address[]

  @@unique([name, stateId])
  @@map("cities")
}

model Address {
  id          String   @id @default(uuid())
  city        City     @relation(fields: [cityId], references: [id])
  cityId      String
  state       State    @relation(fields: [stateId], references: [id])
  stateId     String
  street      String
  number      String
  postal_code String
  complement  String
  events      Event[]
  created_at  DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  @@map("address")
}

model Company {
  id             String           @id @default(uuid())
  name           String
  cnpj           String           @unique
  segment        String
  active         Boolean          @default(true)
  created_at     DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  AttendanceList AttendanceList[]

  @@map("company")
}
